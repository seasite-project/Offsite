model_tool: kerncraft
ODE grid dim: n/3
characteristics:
  - sparse
  - access_distance: 2*g
constants:
  - double cusp_diffus = 1.0
components:
  - type: memory-bound
    name: PDE1
    first: 1
    size: g-2
    code: |
      ((-10000.0 * (%in[j+2*g] + %in[j] * (%in[j+g] + %in[j] * %in[j]))) + cusp_diffus * (%in[j-1] - 2.0 * %in[j] + %in[j+1]))
  - type: compute-bound
    name: PDE2
    first: g+1
    size: g-2
    code: |
      ((%in[j+g] + 0.07 * (((%in[j-g] - 0.7) * (%in[j-g] - 1.3)) / (((%in[j-g] - 0.7) * (%in[j-g] - 1.3)) + 0.1))) + cusp_diffus * (%in[j-1] - 2.0 * %in[j] + %in[j+1]))
  - type: compute-bound
    name: PDE3
    first: 2*g+1
    size: g-2
    code: |
      (((1.0 * (1.0 - %in[j-g] * %in[j-g]) * %in[j] - %in[j-g]) - 0.4 * %in[j-2*g] + 0.035 * (((%in[j-2*g] - 0.7) * (%in[j-2*g] - 1.3)) / (((%in[j-2*g] - 0.7) * (%in[j-2*g] - 1.3)) + 0.1))) + cusp_diffus * (%in[j-1] - 2.0 * %in[j] + %in[j+1]))
codegen:
  eval_range: |
    int j = first;
    if (first < g && last >= 2*g)
    { // All three PDEs
      if (first == 0)
      {
        f[j] = ((-10000.0 * (%in[2*g] + %in[0] * (%in[g] + %in[0] * %in[0]))) + cusp_diffus * (%in[g-1] - 2.0 * %in[0] + %in[1]));
        ++j;
      }

    #pragma ivdep
      for (; j < g-1; ++j)
        f[j] = ((-10000.0 * (%in[j+2*g] + %in[j] * (%in[j+g] + %in[j] * %in[j]))) + cusp_diffus * (%in[j-1] - 2.0 * %in[j] + %in[j+1]));

      f[j] = ((-10000.0 * (%in[n-1] + %in[g-1] * (%in[2*g-1] + %in[g-1] * %in[g-1]))) + cusp_diffus * (%in[g-2] - 2.0 * %in[g-1] + %in[0]));
      ++j;

      f[j] = ((%in[2*g] + 0.07 * (((%in[0] - 0.7) * (%in[0] - 1.3)) / (((%in[0] - 0.7) * (%in[0] - 1.3)) + 0.1))) + cusp_diffus * (%in[2*g-1] - 2.0 * %in[g] + %in[g+1]));
      ++j;

    #pragma ivdep
      for (; j < (2*g-1); ++j)
        f[j] = ((%in[j+g] + 0.07 * (((%in[j-g] - 0.7) * (%in[j-g] - 1.3)) / (((%in[j-g] - 0.7) * (%in[j-g] - 1.3)) + 0.1))) + cusp_diffus * (%in[j-1] - 2.0 * %in[j] + %in[j+1]));

      f[j] = ((%in[n-1] + 0.07 * (((%in[g-1] - 0.7) * (%in[g-1] - 1.3)) / (((%in[g-1] - 0.7) * (%in[g-1] - 1.3)) + 0.1))) + cusp_diffus * (%in[2*g-2] - 2.0 * %in[2*g-1] + %in[g]));
      ++j;

      f[j] = (((1.0 * (1.0 - %in[g] * %in[g]) * %in[2*g] - %in[g]) - 0.4 * %in[0] + 0.035 * ((%in[0] - 0.7) * (%in[0] - 1.3) / ((%in[0] - 0.7) * (%in[0] - 1.3) + 0.1))) + cusp_diffus * (%in[n-1] - 2.0 * %in[2*g] + %in[2*g+1]));
      ++j;

      if (last < n-1)
      {
    #pragma ivdep
        for (; j <= last; ++j)
          f[j] = (((1.0 * (1.0 - %in[j-g] * %in[j-g]) * %in[j] - %in[j-g]) - 0.4 * %in[j-2*g] + 0.035 * (((%in[j-2*g] - 0.7) * (%in[j-2*g] - 1.3)) / (((%in[j-2*g] - 0.7) * (%in[j-2*g] - 1.3)) + 0.1))) + cusp_diffus * (%in[j-1] - 2.0 * %in[j] + %in[j+1])); 
      }
      else if (last == n-1)
      {
    #pragma ivdep
        for (; j < n-1; ++j)
          f[j] = (((1.0 * (1.0 - %in[j-g] * %in[j-g]) * %in[j] - %in[j-g]) - 0.4 * %in[j-2*g] + 0.035 * (((%in[j-2*g] - 0.7) * (%in[j-2*g] - 1.3)) / (((%in[j-2*g] - 0.7) * (%in[j-2*g] - 1.3)) + 0.1))) + cusp_diffus * (%in[j-1] - 2.0 * %in[j] + %in[j+1]));
        f[j] = ((((1.0 * (1.0 - %in[2*g-1] * %in[2*g-1]) * %in[n-1] - %in[2*g-1]) - 0.4 * %in[g-1] + 0.035 * (((%in[g-1] - 0.7) * (%in[g-1] - 1.3)) / (((%in[g-1] - 0.7) * (%in[g-1] - 1.3)) + 0.1))) + cusp_diffus * (%in[n-2] - 2.0 * %in[n-1] + %in[2*g])));
      }
    }
    else if (first < g && last >= g)
    { // 1. & 2. PDE
      if (first == 0)
      {
        f[j] = ((-10000.0 * (%in[2*g] + %in[0] * (%in[g] + %in[0] * %in[0]))) + cusp_diffus * (%in[g-1] - 2.0 * %in[0] + %in[1]));
        ++j;
      }

    #pragma ivdep
      for (; j < g-1; ++j)
        f[j] = ((-10000.0 * (%in[j+2*g] + %in[j] * (%in[j+g] + %in[j] * %in[j]))) + cusp_diffus * (%in[j-1] - 2.0 * %in[j] + %in[j+1]));

      f[j] = ((-10000.0 * (%in[n-1] + %in[g-1] * (%in[2*g-1] + %in[g-1] * %in[g-1]))) + cusp_diffus * (%in[g-2] - 2.0 * %in[g-1] + %in[0]));
      ++j;

      f[j] = ((%in[2*g] + 0.07 * (((%in[0] - 0.7) * (%in[0] - 1.3)) / (((%in[0] - 0.7) * (%in[0] - 1.3)) + 0.1))) + cusp_diffus * (%in[2*g-1] - 2.0 * %in[g] + %in[g+1]));
      ++j;

      if (last < g-1)
      {
    #pragma ivdep
        for (; j <= last; ++j)
          f[j] = ((%in[j+g] + 0.07 * (((%in[j-g] - 0.7) * (%in[j-g] - 1.3)) / (((%in[j-g] - 0.7) * (%in[j-g] - 1.3)) + 0.1))) + cusp_diffus * (%in[j-1] - 2.0 * %in[j] + %in[j+1])); 
      }
      else if (last == g-1)
      {
    #pragma ivdep
        for (; j < g-1; ++j)
          f[j] = (((1.0 * (1.0 - %in[j-g] * %in[j-g]) * %in[j] - %in[j-g]) - 0.4 * %in[j-2*g] + 0.035 * (((%in[j-2*g] - 0.7) * (%in[j-2*g] - 1.3)) / (((%in[j-2*g] - 0.7) * (%in[j-2*g] - 1.3)) + 0.1))) + cusp_diffus * (%in[j-1] - 2.0 * %in[j] + %in[j+1]));
        f[j] = ((((1.0 * (1.0 - %in[2*g-1] * %in[2*g-1]) * %in[n-1] - %in[2*g-1]) - 0.4 * %in[g-1] + 0.035 * (((%in[g-1] - 0.7) * (%in[g-1] - 1.3)) / (((%in[g-1] - 0.7) * (%in[g-1] - 1.3)) + 0.1))) + cusp_diffus * (%in[n-2] - 2.0 * %in[n-1] + %in[2*g])));
      }
    }
    else if (first >= g && last < n)
    { // 2. & 3. PDE
      if (first == g)
      {
        f[j] = ((%in[2*g] + 0.07 * (((%in[0] - 0.7) * (%in[0] - 1.3)) / (((%in[0] - 0.7) * (%in[0] - 1.3)) + 0.1))) + cusp_diffus * (%in[2*g-1] - 2.0 * %in[g] + %in[g+1]));
        ++j;
      }

    #pragma ivdep
      for (; j < (2*g-1); ++j)
        f[j] = ((%in[j+g] + 0.07 * (((%in[j-g] - 0.7) * (%in[j-g] - 1.3)) / (((%in[j-g] - 0.7) * (%in[j-g] - 1.3)) + 0.1))) + cusp_diffus * (%in[j-1] - 2.0 * %in[j] + %in[j+1]));

      f[j] = ((%in[n-1] + 0.07 * (((%in[g-1] - 0.7) * (%in[g-1] - 1.3)) / (((%in[g-1] - 0.7) * (%in[g-1] - 1.3)) + 0.1))) + cusp_diffus * (%in[2*g-2] - 2.0 * %in[2*g-1] + %in[g]));
      ++j;

      f[j] = (((1.0 * (1.0 - %in[g] * %in[g]) * %in[2*g] - %in[g]) - 0.4 * %in[0] + 0.035 * (((%in[0] - 0.7) * (%in[0] - 1.3)) / (((%in[0] - 0.7) * (%in[0] - 1.3)) + 0.1))) + cusp_diffus * (%in[n-1] - 2.0 * %in[2*g] + %in[2*g+1]));
      ++j;

      if (last < n-1)
      {
    #pragma ivdep
        for (; j <= last; ++j)
          f[j] = (((1.0 * (1.0 - %in[j-g] * %in[j-g]) * %in[j] - %in[j-g]) - 0.4 * %in[j-2*g] + 0.035 * (((%in[j-2*g] - 0.7) * (%in[j-2*g] - 1.3)) / (((%in[j-2*g] - 0.7) * (%in[j-2*g] - 1.3)) + 0.1))) + cusp_diffus * (%in[j-1] - 2.0 * %in[j] + %in[j+1])); 
      }
      else if (last == n-1)
      {
    #pragma ivdep
        for (; j < n-1; ++j)
          f[j] = (((1.0 * (1.0 - %in[j-g] * %in[j-g]) * %in[j] - %in[j-g]) - 0.4 * %in[j-2*g] + 0.035 * (((%in[j-2*g] - 0.7) * (%in[j-2*g] - 1.3)) / (((%in[j-2*g] - 0.7) * (%in[j-2*g] - 1.3)) + 0.1))) + cusp_diffus * (%in[j-1] - 2.0 * %in[j] + %in[j+1]));
        f[j] = ((((1.0 * (1.0 - %in[2*g-1] * %in[2*g-1]) * %in[n-1] - %in[2*g-1]) - 0.4 * %in[g-1] + 0.035 * (((%in[g-1] - 0.7) * (%in[g-1] - 1.3)) / (((%in[g-1] - 0.7) * (%in[g-1] - 1.3)) + 0.1))) + cusp_diffus * (%in[n-2] - 2.0 * %in[n-1] + %in[2*g])));
      }
    }
    else if (last < g) // Only 1.PDE
    {
      if (first == 0)
      {
        f[j] = ((-10000.0 * (%in[2*g] + %in[0] * (%in[g] + %in[0] * %in[0]))) + cusp_diffus * (%in[g-1] - 2.0 * %in[0] + %in[1]));
        ++j;
      }

      if (last < g-1)
      {
    #pragma ivdep
        for (; j <= last; ++j)
          f[j] = ((-10000.0 * (%in[j+2*g] + %in[j] * (%in[j+g] + %in[j] * %in[j]))) + cusp_diffus * (%in[j-1] - 2.0 * %in[j] + %in[j+1]));
      }   
      else if (last == g-1)
      {
    #pragma ivdep
        for (; j < g - 1; ++j)
          f[j] = ((-10000.0 * (%in[j+2*g] + %in[j] * (%in[j+g] + %in[j] * %in[j]))) + cusp_diffus * (%in[j-1] - 2.0 * %in[j] + %in[j+1]));

        f[j] = ((-10000.0 * (%in[n-1] + %in[g-1] * (%in[2*g-1] + %in[g-1] * %in[g-1]))) + cusp_diffus * (%in[g-2] - 2.0 * %in[g-1] + %in[0]));
      }
    }
    else if (last < 2*g) // Only 2.PDE
    {
      if (first == g)
      {
        f[j] = ((%in[2*g] + 0.07 * (((%in[0] - 0.7) * (%in[0] - 1.3)) / (((%in[0] - 0.7) * (%in[0] - 1.3)) + 0.1))) + cusp_diffus * (%in[2*g-1] - 2.0 * %in[g] + %in[g+1]));
        ++j;
      }

      if (last < (2*g-1))
      {
    #pragma ivdep
        for (; j <= last; ++j)
          f[j] = ((%in[j+g] + 0.07 * (((%in[j-g] - 0.7) * (%in[j-g] - 1.3)) / (((%in[j-g] - 0.7) * (%in[j-g] - 1.3)) + 0.1))) + cusp_diffus * (%in[j-1] - 2.0 * %in[j] + %in[j+1]));
      }   
      else if (last == (2*g -1))
      {
    #pragma ivdep
        for (; j < (2*g - 1); ++j)
          f[j] = ((%in[j+g] + 0.07 * (((%in[j-g] - 0.7) * (%in[j-g] - 1.3)) / (((%in[j-g] - 0.7) * (%in[j-g] - 1.3)) + 0.1))) + cusp_diffus * (%in[j-1] - 2.0 * %in[j] + %in[j+1]));

        f[j] = ((%in[n-1] + 0.07 * (((%in[g-1] - 0.7) * (%in[g-1] - 1.3)) / (((%in[g-1] - 0.7) * (%in[g-1] - 1.3)) + 0.1))) + cusp_diffus * (%in[2*g-2] - 2.0 * %in[2*g-1] + %in[g]));
      }
    }
    else if (last < n) // Only 3.PDE
    {
      if (first == 2*g)
      {
        f[j] = (((1.0 * (1.0 - %in[g] * %in[g]) * %in[2*g] - %in[g]) - 0.4 * %in[0] + 0.035 * (((%in[0] - 0.7) * (%in[0] - 1.3)) / (((%in[0] - 0.7) * (%in[0] - 1.3)) + 0.1))) + cusp_diffus * (%in[n-1] - 2.0 * %in[2*g] + %in[2*g+1]));
        ++j;
      }

      if (last < n-1)
      {
    #pragma ivdep
        for (; j <= last; ++j)
          f[j] = (((1.0 * (1.0 - %in[j-g] * %in[j-g]) * %in[j] - %in[j-g]) - 0.4 * %in[j-2*g] + 0.035 * (((%in[j-2*g] - 0.7) * (%in[j-2*g] - 1.3)) / (((%in[j-2*g] - 0.7) * (%in[j-2*g] - 1.3)) + 0.1))) + cusp_diffus * (%in[j-1] - 2.0 * %in[j] + %in[j+1]));
      }   
      else if (last == n-1)
      {
    #pragma ivdep
        for (; j < n-1; ++j)
          f[j] = (((1.0 * (1.0 - %in[j-g] * %in[j-g]) * %in[j] - %in[j-g]) - 0.4 * %in[j-2*g] + 0.035 * (((%in[j-2*g] - 0.7) * (%in[j-2*g] - 1.3)) / (((%in[j-2*g] - 0.7) * (%in[j-2*g] - 1.3)) + 0.1))) + cusp_diffus * (%in[j-1] - 2.0 * %in[j] + %in[j+1]));

        f[j] = ((((1.0 * (1.0 - %in[2*g-1] * %in[2*g-1]) * %in[n-1] - %in[2*g-1]) - 0.4 * %in[g-1] + 0.035 * (((%in[g-1] - 0.7) * (%in[g-1] - 1.3)) / (((%in[g-1] - 0.7) * (%in[g-1] - 1.3)) + 0.1))) + cusp_diffus * (%in[n-2] - 2.0 * %in[n-1] + %in[2*g])));
      }
    }
  eval_component: |
    if (j == 0)
      return ((-10000.0 * (%in[2*g] + %in[0] * (%in[g] + %in[0] * %in[0]))) + cusp_diffus * (%in[g-1] - 2.0 * %in[0] + %in[1]));
    else if (j < g-1)
      return ((-10000.0 * (%in[j+2*g] + %in[j] * (%in[j+g] + %in[j] * %in[j]))) + cusp_diffus * (%in[j-1] - 2.0 * %in[j] + %in[j+1]));
    else if (j == g-1)
      return ((-10000.0 * (%in[n-1] + %in[g-1] * (%in[2*g-1] + %in[g-1] * %in[g-1]))) + cusp_diffus * (%in[g-2] - 2.0 * %in[g-1] + %in[0]));
    else if (j == g)
      return ((%in[2*g] + 0.07 * (((%in[0] - 0.7) * (%in[0] - 1.3)) / (((%in[0] - 0.7) * (%in[0] - 1.3)) + 0.1))) + cusp_diffus * (%in[2*g-1] - 2.0 * %in[g] + %in[g+1]));
    else if (j < 2*g-1)
      return ((%in[j+g] + 0.07 * (((%in[j-g] - 0.7) * (%in[j-g] - 1.3)) / (((%in[j-g] - 0.7) * (%in[j-g] - 1.3)) + 0.1))) + cusp_diffus * (%in[j-1] - 2.0 * %in[j] + %in[j+1]));
    else if (j == 2*g-1)
      return ((%in[n-1] + 0.07 * (((%in[g-1] - 0.7) * (%in[g-1] - 1.3)) / (((%in[g-1] - 0.7) * (%in[g-1] - 1.3)) + 0.1))) + cusp_diffus * (%in[2*g-2] - 2.0 * %in[2*g-1] + %in[g]));
    else if (j == 2*g)
      return (((1.0 * (1.0 - %in[g] * %in[g]) * %in[2*g] - %in[g]) - 0.4 * %in[0] + 0.035 * (((%in[0] - 0.7) * (%in[0] - 1.3)) / (((%in[0] - 0.7) * (%in[0] - 1.3)) + 0.1))) + cusp_diffus * (%in[n-1] - 2.0 * %in[2*g] + %in[2*g+1]));
    else if (j < 3*g-1)
      return (((1.0 * (1.0 - %in[j-g] * %in[j-g]) * %in[j] - %in[j-g]) - 0.4 * %in[j-2*g] + 0.035 * (((%in[j-2*g] - 0.7) * (%in[j-2*g] - 1.3)) / (((%in[j-2*g] - 0.7) * (%in[j-2*g] - 1.3)) + 0.1))) + cusp_diffus * (%in[j-1] - 2.0 * %in[j] + %in[j+1])); 
    else if (j == 3*g-1)
      return ((((1.0 * (1.0 - %in[2*g-1] * %in[2*g-1]) * %in[n-1] - %in[2*g-1]) - 0.4 * %in[g-1] + 0.035 * (((%in[g-1] - 0.7) * (%in[g-1] - 1.3)) / (((%in[g-1] - 0.7) * (%in[g-1] - 1.3)) + 0.1))) + cusp_diffus * (%in[n-2] - 2.0 * %in[n-1] + %in[2*g])));
  initial_values: |
    const double del = 2.0 * 3.14159265358979324 / g;
    for (int i = 1; i <= n / 3; i++)
    {
      %in[i - 1] = 0.0;
      %in[g + i - 1] = -2.0 * cos(i * del);
      %in[g + g + 1 -1] = 2.0 * sin(i * del);
    }
  required_indices: |
    std::set<int> set;
    for(int i = imax(first - 1, 0); i <= imin(last + 1, n-1); i++)
    {
      set.insert(i);
    }
    for(int i = first + g; i <= imin(last + g, n-1); i++)
    {
      set.insert(i);
    }
    for(int i = first + 2*g; i <= imin(last + 2*g, n-1); i++)
    {
      set.insert(i);
    }
    for(int i = imax(first - g, 0); i <= imin(last - g, n-1); i++)
    {
      set.insert(i);
    }
    for(int i = imax(first - 2*g, 0); i <= imin(last - 2*g, n-1); i++)
    {
      set.insert(i);
    }
    return set;
