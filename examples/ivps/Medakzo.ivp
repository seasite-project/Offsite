model_tool: kerncraft
ODE grid dim: n/2
characteristics:
  - sparse
constants:
  - double medakzo_v = 1.0
  - double medakzo_k = 100.0
  - double medakzo_c = 4.0
  - double dzeta = 1.0 / g
components:
  - type: compute-bound
    name: PDE1
    first: 1
    size: g-2
    code: |
      ((2.0 * ((((j + 1) / 2) * dzeta) - 1.0) * ((dzeta - 1.0) * (((j + 1) * dzeta) - 1.0) / medakzo_c) / medakzo_c * %in[j+1] - %in[j-1]) / (2.0 * dzeta) + (%in[j-1] - 2.0 * %in[j] + %in[j+1] * (((dzeta - 1.0) * (((j + 1) * dzeta) - 1.0) / medakzo_c) * ((dzeta - 1.0) * (((j + 1) * dzeta) - 1.0) / medakzo_c)) / (dzeta*dzeta)) - medakzo_k * %in[j] * %in[j+g])
  - type: memory-bound
    name: PDE2
    first: g
    size: g
    code: |
      -medakzo_k * %in[j]
codegen:
  eval_range: |
    int j = first;

    if (first < g && last >= g) 
    { // Both PDEs
      if (first == 0)
      {
        double phi = 0.0;
        if (t <= 5.0)
          phi = 2.0;

        double tmp = (dzeta - 1.0) * (dzeta - 1.0) / medakzo_c;
        double alpha = 2.0 * (dzeta - 1.0) * tmp / medakzo_c;
        double  beta = tmp * tmp;

        f[j] = alpha * (%in[1] - phi) / (2.0 * dzeta) + (phi - 2.0 * %in[0] + %in[1]) * beta / (dzeta*dzeta) - medakzo_k * %in[0] * %in[g];
        ++j;
      }

    #pragma ivdep
      for (; j < g-1; ++j) {
        double zeta = ((j + 1) / 2) * dzeta;
        double tmp = (zeta - 1.0) * (zeta - 1.0) / medakzo_c;
        double alpha = 2.0 * (zeta - 1.0) * tmp / medakzo_c;
        double beta = tmp * tmp;
        f[j] = (alpha * (%in[j+1] - %in[j-1]) / (2.0 * dzeta) + (%in[j-1] - 2.0 * %in[j] + %in[j+1]) * beta / (dzeta*dzeta)) - medakzo_k * %in[j] * %in[j + g];
      }

      f[j] = -medakzo_k * %in[g - 1] * %in[n - 1];
      ++j;

      f[j] = -medakzo_k * %in[0] * %in[g];
      ++j;

      if (last < n-1)
      {
    #pragma ivdep
        for (; j <= last; ++j)
          f[j] = -medakzo_k * %in[j] * %in[j - g];
      }
      else if (last == n-1)
      {
    #pragma ivdep
        for (; j < n-1; ++j)
          f[j] = -medakzo_k * %in[j] * %in[j - g];
        f[j] = (-medakzo_k * %in[g - 1] * %in[n - 1]);
      }
    }
    if (last < g) // Only 1.PDE
    {
      if (first == 0)
      {
        double phi = 0.0;
        if (t <= 5.0)
          phi = 2.0;

        double tmp = (dzeta - 1.0) * (dzeta - 1.0) / medakzo_c;
        double alpha = 2.0 * (dzeta - 1.0) * tmp / medakzo_c;
        double  beta = tmp * tmp;

        f[j] = alpha * (%in[1] - phi) / (2.0 * dzeta) + (phi - 2.0 * %in[0] + %in[1]) * beta / (dzeta*dzeta) - medakzo_k * %in[0] * %in[g];
        ++j;
      }

      if (last < g-1)
      {
    #pragma ivdep
        for (; j <= last; ++j) {
          double zeta = ((j + 1) / 2) * dzeta;
          double tmp = (zeta - 1.0) * (zeta - 1.0) / medakzo_c;
          double alpha = 2.0 * (zeta - 1.0) * tmp / medakzo_c;
          double beta = tmp * tmp;
          f[j] = (alpha * (%in[j+1] - %in[j-1]) / (2.0 * dzeta) + (%in[j-1] - 2.0 * %in[j] + %in[j+1]) * beta / (dzeta*dzeta)) - medakzo_k * %in[j] * %in[j + g];
        }
      }   
      else if (last == g-1)
      {
    #pragma ivdep
        for (; j < g - 1; ++j) {
          double zeta = ((j + 1) / 2) * dzeta;
          double tmp = (zeta - 1.0) * (zeta - 1.0) / medakzo_c;
          double alpha = 2.0 * (zeta - 1.0) * tmp / medakzo_c;
          double beta = tmp * tmp;
          f[j] = (alpha * (%in[j+1] - %in[j-1]) / (2.0 * dzeta) + (%in[j-1] - 2.0 * %in[j] + %in[j+1]) * beta / (dzeta*dzeta)) - medakzo_k * %in[j] * %in[j + g];
        }

        f[j] = -medakzo_k * %in[g - 1] * %in[n - 1];
      }
    }
    else if (first >=g) // 2.PDE
    {
      if (first == g)
      {
        f[j] = -medakzo_k * %in[0] * %in[g];
        ++j;
      }

      if (last < n-1)
      {
    #pragma ivdep
        for (; j <= last; ++j)
          f[j] = -medakzo_k * %in[j] * %in[j - g];
      }   
      else
      {
        #pragma ivdep
        for (; j < n - 1; ++j)
          f[j] = -medakzo_k * %in[j] * %in[j - g];

        f[j] = (-medakzo_k * %in[g - 1] * %in[n - 1]);
      }
    }
  eval_component: |
    if (j > 0 && j < g-1) {
      double zeta = ((j + 1) / 2) * dzeta;
      double tmp = (zeta - 1.0) * (zeta - 1.0) / medakzo_c;
      double alpha = 2.0 * (zeta - 1.0) * tmp / medakzo_c;
      double beta = tmp * tmp;

      return (alpha * (%in[j+1] - %in[j-1]) / (2.0 * dzeta) + (%in[j-1] - 2.0 * %in[j] + %in[j+1]) * beta / (dzeta*dzeta)) - medakzo_k * %in[j] * %in[j + g];
    }
    else if (j == 0) {
      double phi = 0.0;
      if (t <= 5.0)
        phi = 2.0;

      double tmp = (dzeta - 1.0) * (dzeta - 1.0) / medakzo_c;
      double alpha = 2.0 * (dzeta - 1.0) * tmp / medakzo_c;
      double  beta = tmp * tmp;

      return alpha * (%in[1] - phi) / (2.0 * dzeta) + (phi - 2.0 * %in[0] + %in[1]) * beta / (dzeta*dzeta) - medakzo_k * %in[0] * %in[g];
    }
    else if (j == g-1)
      return -medakzo_k * %in[g - 1] * %in[n - 1];
    else if (j == g)
      return -medakzo_k * %in[0] * %in[g];
    else if (j < 2*g-1)
      return -medakzo_k * %in[j] * %in[j - g];
    else if (j == 2*g-1)
      return (-medakzo_k * %in[g - 1] * %in[n - 1]);
    return -1;
  initial_values: |
    for (int i = 1; i <= n / 2; i++)
    {
      %in[i - 1] = 0.0;
      %in[g + i - 1] = medakzo_v;
    }

