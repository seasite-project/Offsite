#pragma once

#define PROBLEM_NAME "Cusp"
#define PROBLEM_ID 1

static inline void
eval_range (int first, int last, double t, const double *y, double *f)
{
  int j = first;
  if (first < g && last >= 2 * g)
    {				// All three PDEs
      if (first == 0)
	{
	  f[j] =
	    ((-10000.0 * (y[2 * g] + y[0] * (y[g] + y[0] * y[0]))) +
	     1.00000000000000 * (y[g - 1] - 2.0 * y[0] + y[1]));
	  ++j;
	}

#pragma ivdep
      for (; j < g - 1; ++j)
	f[j] =
	  ((-10000.0 * (y[j + 2 * g] + y[j] * (y[j + g] + y[j] * y[j]))) +
	   1.00000000000000 * (y[j - 1] - 2.0 * y[j] + y[j + 1]));

      f[j] =
	((-10000.0 *
	  (y[n - 1] + y[g - 1] * (y[2 * g - 1] + y[g - 1] * y[g - 1]))) +
	 1.00000000000000 * (y[g - 2] - 2.0 * y[g - 1] + y[0]));
      ++j;

      f[j] =
	((y[2 * g] +
	  0.07 * (((y[0] - 0.7) * (y[0] - 1.3)) /
		  (((y[0] - 0.7) * (y[0] - 1.3)) + 0.1))) +
	 1.00000000000000 * (y[2 * g - 1] - 2.0 * y[g] + y[g + 1]));
      ++j;

#pragma ivdep
      for (; j < (2 * g - 1); ++j)
	f[j] =
	  ((y[j + g] +
	    0.07 * (((y[j - g] - 0.7) * (y[j - g] - 1.3)) /
		    (((y[j - g] - 0.7) * (y[j - g] - 1.3)) + 0.1))) +
	   1.00000000000000 * (y[j - 1] - 2.0 * y[j] + y[j + 1]));

      f[j] =
	((y[n - 1] +
	  0.07 * (((y[g - 1] - 0.7) * (y[g - 1] - 1.3)) /
		  (((y[g - 1] - 0.7) * (y[g - 1] - 1.3)) + 0.1))) +
	 1.00000000000000 * (y[2 * g - 2] - 2.0 * y[2 * g - 1] + y[g]));
      ++j;

      f[j] =
	(((1.0 * (1.0 - y[g] * y[g]) * y[2 * g] - y[g]) - 0.4 * y[0] +
	  0.035 * ((y[0] - 0.7) * (y[0] - 1.3) /
		   ((y[0] - 0.7) * (y[0] - 1.3) + 0.1))) +
	 1.00000000000000 * (y[n - 1] - 2.0 * y[2 * g] + y[2 * g + 1]));
      ++j;

      if (last < n - 1)
	{
#pragma ivdep
	  for (; j <= last; ++j)
	    f[j] =
	      (((1.0 * (1.0 - y[j - g] * y[j - g]) * y[j] - y[j - g]) -
		0.4 * y[j - 2 * g] +
		0.035 * (((y[j - 2 * g] - 0.7) * (y[j - 2 * g] - 1.3)) /
			 (((y[j - 2 * g] - 0.7) * (y[j - 2 * g] - 1.3)) +
			  0.1))) + 1.00000000000000 * (y[j - 1] - 2.0 * y[j] +
						       y[j + 1]));
	}
      else if (last == n - 1)
	{
#pragma ivdep
	  for (; j < n - 1; ++j)
	    f[j] =
	      (((1.0 * (1.0 - y[j - g] * y[j - g]) * y[j] - y[j - g]) -
		0.4 * y[j - 2 * g] +
		0.035 * (((y[j - 2 * g] - 0.7) * (y[j - 2 * g] - 1.3)) /
			 (((y[j - 2 * g] - 0.7) * (y[j - 2 * g] - 1.3)) +
			  0.1))) + 1.00000000000000 * (y[j - 1] - 2.0 * y[j] +
						       y[j + 1]));
	  f[j] =
	    ((((1.0 * (1.0 - y[2 * g - 1] * y[2 * g - 1]) * y[n - 1] -
		y[2 * g - 1]) - 0.4 * y[g - 1] +
	       0.035 * (((y[g - 1] - 0.7) * (y[g - 1] - 1.3)) /
			(((y[g - 1] - 0.7) * (y[g - 1] - 1.3)) + 0.1))) +
	      1.00000000000000 * (y[n - 2] - 2.0 * y[n - 1] + y[2 * g])));
	}
    }
  else if (first < g && last >= g)
    {				// 1. & 2. PDE
      if (first == 0)
	{
	  f[j] =
	    ((-10000.0 * (y[2 * g] + y[0] * (y[g] + y[0] * y[0]))) +
	     1.00000000000000 * (y[g - 1] - 2.0 * y[0] + y[1]));
	  ++j;
	}

#pragma ivdep
      for (; j < g - 1; ++j)
	f[j] =
	  ((-10000.0 * (y[j + 2 * g] + y[j] * (y[j + g] + y[j] * y[j]))) +
	   1.00000000000000 * (y[j - 1] - 2.0 * y[j] + y[j + 1]));

      f[j] =
	((-10000.0 *
	  (y[n - 1] + y[g - 1] * (y[2 * g - 1] + y[g - 1] * y[g - 1]))) +
	 1.00000000000000 * (y[g - 2] - 2.0 * y[g - 1] + y[0]));
      ++j;

      f[j] =
	((y[2 * g] +
	  0.07 * (((y[0] - 0.7) * (y[0] - 1.3)) /
		  (((y[0] - 0.7) * (y[0] - 1.3)) + 0.1))) +
	 1.00000000000000 * (y[2 * g - 1] - 2.0 * y[g] + y[g + 1]));
      ++j;

      if (last < g - 1)
	{
#pragma ivdep
	  for (; j <= last; ++j)
	    f[j] =
	      ((y[j + g] +
		0.07 * (((y[j - g] - 0.7) * (y[j - g] - 1.3)) /
			(((y[j - g] - 0.7) * (y[j - g] - 1.3)) + 0.1))) +
	       1.00000000000000 * (y[j - 1] - 2.0 * y[j] + y[j + 1]));
	}
      else if (last == g - 1)
	{
#pragma ivdep
	  for (; j < g - 1; ++j)
	    f[j] =
	      (((1.0 * (1.0 - y[j - g] * y[j - g]) * y[j] - y[j - g]) -
		0.4 * y[j - 2 * g] +
		0.035 * (((y[j - 2 * g] - 0.7) * (y[j - 2 * g] - 1.3)) /
			 (((y[j - 2 * g] - 0.7) * (y[j - 2 * g] - 1.3)) +
			  0.1))) + 1.00000000000000 * (y[j - 1] - 2.0 * y[j] +
						       y[j + 1]));
	  f[j] =
	    ((((1.0 * (1.0 - y[2 * g - 1] * y[2 * g - 1]) * y[n - 1] -
		y[2 * g - 1]) - 0.4 * y[g - 1] +
	       0.035 * (((y[g - 1] - 0.7) * (y[g - 1] - 1.3)) /
			(((y[g - 1] - 0.7) * (y[g - 1] - 1.3)) + 0.1))) +
	      1.00000000000000 * (y[n - 2] - 2.0 * y[n - 1] + y[2 * g])));
	}
    }
  else if (first >= g && last < n)
    {				// 2. & 3. PDE
      if (first == g)
	{
	  f[j] =
	    ((y[2 * g] +
	      0.07 * (((y[0] - 0.7) * (y[0] - 1.3)) /
		      (((y[0] - 0.7) * (y[0] - 1.3)) + 0.1))) +
	     1.00000000000000 * (y[2 * g - 1] - 2.0 * y[g] + y[g + 1]));
	  ++j;
	}

#pragma ivdep
      for (; j < (2 * g - 1); ++j)
	f[j] =
	  ((y[j + g] +
	    0.07 * (((y[j - g] - 0.7) * (y[j - g] - 1.3)) /
		    (((y[j - g] - 0.7) * (y[j - g] - 1.3)) + 0.1))) +
	   1.00000000000000 * (y[j - 1] - 2.0 * y[j] + y[j + 1]));

      f[j] =
	((y[n - 1] +
	  0.07 * (((y[g - 1] - 0.7) * (y[g - 1] - 1.3)) /
		  (((y[g - 1] - 0.7) * (y[g - 1] - 1.3)) + 0.1))) +
	 1.00000000000000 * (y[2 * g - 2] - 2.0 * y[2 * g - 1] + y[g]));
      ++j;

      f[j] =
	(((1.0 * (1.0 - y[g] * y[g]) * y[2 * g] - y[g]) - 0.4 * y[0] +
	  0.035 * (((y[0] - 0.7) * (y[0] - 1.3)) /
		   (((y[0] - 0.7) * (y[0] - 1.3)) + 0.1))) +
	 1.00000000000000 * (y[n - 1] - 2.0 * y[2 * g] + y[2 * g + 1]));
      ++j;

      if (last < n - 1)
	{
#pragma ivdep
	  for (; j <= last; ++j)
	    f[j] =
	      (((1.0 * (1.0 - y[j - g] * y[j - g]) * y[j] - y[j - g]) -
		0.4 * y[j - 2 * g] +
		0.035 * (((y[j - 2 * g] - 0.7) * (y[j - 2 * g] - 1.3)) /
			 (((y[j - 2 * g] - 0.7) * (y[j - 2 * g] - 1.3)) +
			  0.1))) + 1.00000000000000 * (y[j - 1] - 2.0 * y[j] +
						       y[j + 1]));
	}
      else if (last == n - 1)
	{
#pragma ivdep
	  for (; j < n - 1; ++j)
	    f[j] =
	      (((1.0 * (1.0 - y[j - g] * y[j - g]) * y[j] - y[j - g]) -
		0.4 * y[j - 2 * g] +
		0.035 * (((y[j - 2 * g] - 0.7) * (y[j - 2 * g] - 1.3)) /
			 (((y[j - 2 * g] - 0.7) * (y[j - 2 * g] - 1.3)) +
			  0.1))) + 1.00000000000000 * (y[j - 1] - 2.0 * y[j] +
						       y[j + 1]));
	  f[j] =
	    ((((1.0 * (1.0 - y[2 * g - 1] * y[2 * g - 1]) * y[n - 1] -
		y[2 * g - 1]) - 0.4 * y[g - 1] +
	       0.035 * (((y[g - 1] - 0.7) * (y[g - 1] - 1.3)) /
			(((y[g - 1] - 0.7) * (y[g - 1] - 1.3)) + 0.1))) +
	      1.00000000000000 * (y[n - 2] - 2.0 * y[n - 1] + y[2 * g])));
	}
    }
  else if (last < g)		// Only 1.PDE
    {
      if (first == 0)
	{
	  f[j] =
	    ((-10000.0 * (y[2 * g] + y[0] * (y[g] + y[0] * y[0]))) +
	     1.00000000000000 * (y[g - 1] - 2.0 * y[0] + y[1]));
	  ++j;
	}

      if (last < g - 1)
	{
#pragma ivdep
	  for (; j <= last; ++j)
	    f[j] =
	      ((-10000.0 * (y[j + 2 * g] + y[j] * (y[j + g] + y[j] * y[j]))) +
	       1.00000000000000 * (y[j - 1] - 2.0 * y[j] + y[j + 1]));
	}
      else if (last == g - 1)
	{
#pragma ivdep
	  for (; j < g - 1; ++j)
	    f[j] =
	      ((-10000.0 * (y[j + 2 * g] + y[j] * (y[j + g] + y[j] * y[j]))) +
	       1.00000000000000 * (y[j - 1] - 2.0 * y[j] + y[j + 1]));

	  f[j] =
	    ((-10000.0 *
	      (y[n - 1] + y[g - 1] * (y[2 * g - 1] + y[g - 1] * y[g - 1]))) +
	     1.00000000000000 * (y[g - 2] - 2.0 * y[g - 1] + y[0]));
	}
    }
  else if (last < 2 * g)	// Only 2.PDE
    {
      if (first == g)
	{
	  f[j] =
	    ((y[2 * g] +
	      0.07 * (((y[0] - 0.7) * (y[0] - 1.3)) /
		      (((y[0] - 0.7) * (y[0] - 1.3)) + 0.1))) +
	     1.00000000000000 * (y[2 * g - 1] - 2.0 * y[g] + y[g + 1]));
	  ++j;
	}

      if (last < (2 * g - 1))
	{
#pragma ivdep
	  for (; j <= last; ++j)
	    f[j] =
	      ((y[j + g] +
		0.07 * (((y[j - g] - 0.7) * (y[j - g] - 1.3)) /
			(((y[j - g] - 0.7) * (y[j - g] - 1.3)) + 0.1))) +
	       1.00000000000000 * (y[j - 1] - 2.0 * y[j] + y[j + 1]));
	}
      else if (last == (2 * g - 1))
	{
#pragma ivdep
	  for (; j < (2 * g - 1); ++j)
	    f[j] =
	      ((y[j + g] +
		0.07 * (((y[j - g] - 0.7) * (y[j - g] - 1.3)) /
			(((y[j - g] - 0.7) * (y[j - g] - 1.3)) + 0.1))) +
	       1.00000000000000 * (y[j - 1] - 2.0 * y[j] + y[j + 1]));

	  f[j] =
	    ((y[n - 1] +
	      0.07 * (((y[g - 1] - 0.7) * (y[g - 1] - 1.3)) /
		      (((y[g - 1] - 0.7) * (y[g - 1] - 1.3)) + 0.1))) +
	     1.00000000000000 * (y[2 * g - 2] - 2.0 * y[2 * g - 1] + y[g]));
	}
    }
  else if (last < n)		// Only 3.PDE
    {
      if (first == 2 * g)
	{
	  f[j] =
	    (((1.0 * (1.0 - y[g] * y[g]) * y[2 * g] - y[g]) - 0.4 * y[0] +
	      0.035 * (((y[0] - 0.7) * (y[0] - 1.3)) /
		       (((y[0] - 0.7) * (y[0] - 1.3)) + 0.1))) +
	     1.00000000000000 * (y[n - 1] - 2.0 * y[2 * g] + y[2 * g + 1]));
	  ++j;
	}

      if (last < n - 1)
	{
#pragma ivdep
	  for (; j <= last; ++j)
	    f[j] =
	      (((1.0 * (1.0 - y[j - g] * y[j - g]) * y[j] - y[j - g]) -
		0.4 * y[j - 2 * g] +
		0.035 * (((y[j - 2 * g] - 0.7) * (y[j - 2 * g] - 1.3)) /
			 (((y[j - 2 * g] - 0.7) * (y[j - 2 * g] - 1.3)) +
			  0.1))) + 1.00000000000000 * (y[j - 1] - 2.0 * y[j] +
						       y[j + 1]));
	}
      else if (last == n - 1)
	{
#pragma ivdep
	  for (; j < n - 1; ++j)
	    f[j] =
	      (((1.0 * (1.0 - y[j - g] * y[j - g]) * y[j] - y[j - g]) -
		0.4 * y[j - 2 * g] +
		0.035 * (((y[j - 2 * g] - 0.7) * (y[j - 2 * g] - 1.3)) /
			 (((y[j - 2 * g] - 0.7) * (y[j - 2 * g] - 1.3)) +
			  0.1))) + 1.00000000000000 * (y[j - 1] - 2.0 * y[j] +
						       y[j + 1]));

	  f[j] =
	    ((((1.0 * (1.0 - y[2 * g - 1] * y[2 * g - 1]) * y[n - 1] -
		y[2 * g - 1]) - 0.4 * y[g - 1] +
	       0.035 * (((y[g - 1] - 0.7) * (y[g - 1] - 1.3)) /
			(((y[g - 1] - 0.7) * (y[g - 1] - 1.3)) + 0.1))) +
	      1.00000000000000 * (y[n - 2] - 2.0 * y[n - 1] + y[2 * g])));
	}
    }
}

static inline double
eval_component (int j, double t, const double *y)
{
  if (j == 0)
    return ((-10000.0 * (y[2 * g] + y[0] * (y[g] + y[0] * y[0]))) +
	    1.00000000000000 * (y[g - 1] - 2.0 * y[0] + y[1]));
  else if (j < g - 1)
    return ((-10000.0 * (y[j + 2 * g] + y[j] * (y[j + g] + y[j] * y[j]))) +
	    1.00000000000000 * (y[j - 1] - 2.0 * y[j] + y[j + 1]));
  else if (j == g - 1)
    return ((-10000.0 *
	     (y[n - 1] + y[g - 1] * (y[2 * g - 1] + y[g - 1] * y[g - 1]))) +
	    1.00000000000000 * (y[g - 2] - 2.0 * y[g - 1] + y[0]));
  else if (j == g)
    return ((y[2 * g] +
	     0.07 * (((y[0] - 0.7) * (y[0] - 1.3)) /
		     (((y[0] - 0.7) * (y[0] - 1.3)) + 0.1))) +
	    1.00000000000000 * (y[2 * g - 1] - 2.0 * y[g] + y[g + 1]));
  else if (j < 2 * g - 1)
    return ((y[j + g] +
	     0.07 * (((y[j - g] - 0.7) * (y[j - g] - 1.3)) /
		     (((y[j - g] - 0.7) * (y[j - g] - 1.3)) + 0.1))) +
	    1.00000000000000 * (y[j - 1] - 2.0 * y[j] + y[j + 1]));
  else if (j == 2 * g - 1)
    return ((y[n - 1] +
	     0.07 * (((y[g - 1] - 0.7) * (y[g - 1] - 1.3)) /
		     (((y[g - 1] - 0.7) * (y[g - 1] - 1.3)) + 0.1))) +
	    1.00000000000000 * (y[2 * g - 2] - 2.0 * y[2 * g - 1] + y[g]));
  else if (j == 2 * g)
    return (((1.0 * (1.0 - y[g] * y[g]) * y[2 * g] - y[g]) - 0.4 * y[0] +
	     0.035 * (((y[0] - 0.7) * (y[0] - 1.3)) /
		      (((y[0] - 0.7) * (y[0] - 1.3)) + 0.1))) +
	    1.00000000000000 * (y[n - 1] - 2.0 * y[2 * g] + y[2 * g + 1]));
  else if (j < 3 * g - 1)
    return (((1.0 * (1.0 - y[j - g] * y[j - g]) * y[j] - y[j - g]) -
	     0.4 * y[j - 2 * g] +
	     0.035 * (((y[j - 2 * g] - 0.7) * (y[j - 2 * g] - 1.3)) /
		      (((y[j - 2 * g] - 0.7) * (y[j - 2 * g] - 1.3)) +
		       0.1))) + 1.00000000000000 * (y[j - 1] - 2.0 * y[j] +
						    y[j + 1]));
  else if (j == 3 * g - 1)
    return ((((1.0 * (1.0 - y[2 * g - 1] * y[2 * g - 1]) * y[n - 1] -
	       y[2 * g - 1]) - 0.4 * y[g - 1] +
	      0.035 * (((y[g - 1] - 0.7) * (y[g - 1] - 1.3)) /
		       (((y[g - 1] - 0.7) * (y[g - 1] - 1.3)) + 0.1))) +
	     1.00000000000000 * (y[n - 2] - 2.0 * y[n - 1] + y[2 * g])));
}

static inline void
initial_values (const double t, double *y)
{
  const double del = 2.0 * 3.14159265358979324 / g;
  for (int i = 1; i <= n / 3; i++)
    {
      y[i - 1] = 0.0;
      y[g + i - 1] = -2.0 * cos (i * del);
      y[g + g + 1 - 1] = 2.0 * sin (i * del);
    }
}
