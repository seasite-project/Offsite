#pragma once

#define PROBLEM_NAME "Wave1D"
#define PROBLEM_ID 7

static inline void
eval_range (int first, int last, double t, const double *y, double *f)
{
  int j = first;

  if (j < 4)
    {
      if (j == 0 && j <= last)
	{
	  f[0] =
	    -1.0 / ((450.000000000000 - -50.0000000000000) /
		    ((double) g - 1.0)) * (-4.0 / 5.0 * (0.0 - y[1]) +
					   1.0 / 5.0 * (0.0 - y[2]) -
					   4.0 / 105.0 * (0.0 - y[3]) +
					   1.0 / 280.0 * (0.0 - y[4]));
	  ++j;
	}
      if (j == 1 && j <= last)
	{
	  f[1] =
	    -1.0 / ((450.000000000000 - -50.0000000000000) /
		    ((double) g - 1.0)) * (-4.0 / 5.0 * (y[0] - y[2]) +
					   1.0 / 5.0 * (0.0 - y[3]) -
					   4.0 / 105.0 * (0.0 - y[4]) +
					   1.0 / 280.0 * (0.0 - y[5]));
	  ++j;
	}
      if (j == 2 && j <= last)
	{
	  f[2] =
	    -1.0 / ((450.000000000000 - -50.0000000000000) /
		    ((double) g - 1.0)) * (-4.0 / 5.0 * (y[1] - y[3]) +
					   1.0 / 5.0 * (y[0] - y[4]) -
					   4.0 / 105.0 * (0.0 - y[5]) +
					   1.0 / 280.0 * (0.0 - y[6]));
	  ++j;
	}
      if (j == 3 && j <= last)
	{
	  f[3] =
	    -1.0 / ((450.000000000000 - -50.0000000000000) /
		    ((double) g - 1.0)) * (-4.0 / 5.0 * (y[2] - y[4]) +
					   1.0 / 5.0 * (y[1] - y[5]) -
					   4.0 / 105.0 * (y[0] - y[6]) +
					   1.0 / 280.0 * (0.0 - y[7]));
	  ++j;
	}
    }

  for (; j <= last && j < g - 4; ++j)
    {
      f[j] =
	-1.0 / ((450.000000000000 - -50.0000000000000) / ((double) g - 1.0)) *
	(-4.0 / 5.0 * (y[j - 1] - y[j + 1]) +
	 1.0 / 5.0 * (y[j - 2] - y[j + 2]) - 4.0 / 105.0 * (y[j - 3] -
							    y[j + 3]) +
	 1.0 / 280.0 * (y[j - 4] - y[j + 4]));
    }

  if (last >= g - 4)
    {
      if (j == g - 4 && j <= last)
	{
	  f[j] =
	    -1.0 / ((450.000000000000 - -50.0000000000000) /
		    ((double) g - 1.0)) * (-4.0 / 5.0 * (y[j - 1] -
							 y[j + 1]) +
					   1.0 / 5.0 * (y[j - 2] - y[j + 2]) -
					   4.0 / 105.0 * (y[j - 3] -
							  y[j + 3]) +
					   1.0 / 280.0 * (y[j - 4] - 0.0));
	  ++j;
	}
      if (j == g - 3 && j <= last)
	{
	  f[j] =
	    -1.0 / ((450.000000000000 - -50.0000000000000) /
		    ((double) g - 1.0)) * (-4.0 / 5.0 * (y[j - 1] -
							 y[j + 1]) +
					   1.0 / 5.0 * (y[j - 2] - y[j + 2]) -
					   4.0 / 105.0 * (y[j - 3] - 0.0) +
					   1.0 / 280.0 * (y[j - 4] - 0.0));
	  ++j;
	}
      if (j == g - 2 && j <= last)
	{
	  f[j] =
	    -1.0 / ((450.000000000000 - -50.0000000000000) /
		    ((double) g - 1.0)) * (-4.0 / 5.0 * (y[j - 1] -
							 y[j + 1]) +
					   1.0 / 5.0 * (y[j - 2] - 0.0) -
					   4.0 / 105.0 * (y[j - 3] - 0.0) +
					   1.0 / 280.0 * (y[j - 4] - 0.0));
	  ++j;
	}
      if (j == g - 1 && j <= last)
	{
	  f[j] =
	    -1.0 / ((450.000000000000 - -50.0000000000000) /
		    ((double) g - 1.0)) * (-4.0 / 5.0 * (y[j - 1] - 0.0) +
					   1.0 / 5.0 * (y[j - 2] - 0.0) -
					   4.0 / 105.0 * (y[j - 3] - 0.0) +
					   1.0 / 280.0 * (y[j - 4] - 0.0));
	  ++j;
	}
    }
}

static inline double
eval_component (int j, double t, const double *y)
{
  if (j < g - 4)
    {
      return -1.0 / ((450.000000000000 - -50.0000000000000) /
		     ((double) g - 1.0)) * (-4.0 / 5.0 * (y[j - 1] -
							  y[j + 1]) +
					    1.0 / 5.0 * (y[j - 2] -
							 y[j + 2]) -
					    4.0 / 105.0 * (y[j - 3] -
							   y[j + 3]) +
					    1.0 / 280.0 * (y[j - 4] -
							   y[j + 4]));
    }

  if (j < 4)
    {
      if (j == 0)
	{
	  return -1.0 / ((450.000000000000 - -50.0000000000000) /
			 ((double) g - 1.0)) * (-4.0 / 5.0 * (0.0 -
							      y[j + 1]) +
						1.0 / 5.0 * (0.0 - y[j + 2]) -
						4.0 / 105.0 * (0.0 -
							       y[j + 3]) +
						1.0 / 280.0 * (0.0 -
							       y[j + 4]));
	}
      if (j == 1)
	{
	  return -1.0 / ((450.000000000000 - -50.0000000000000) /
			 ((double) g - 1.0)) * (-4.0 / 5.0 * (y[j - 1] -
							      y[j + 1]) +
						1.0 / 5.0 * (0.0 - y[j + 2]) -
						4.0 / 105.0 * (0.0 -
							       y[j + 3]) +
						1.0 / 280.0 * (0.0 -
							       y[j + 4]));
	}
      if (j == 2)
	{
	  return -1.0 / ((450.000000000000 - -50.0000000000000) /
			 ((double) g - 1.0)) * (-4.0 / 5.0 * (y[j - 1] -
							      y[j + 1]) +
						1.0 / 5.0 * (y[j - 2] -
							     y[j + 2]) -
						4.0 / 105.0 * (0.0 -
							       y[j + 3]) +
						1.0 / 280.0 * (0.0 -
							       y[j + 4]));
	}
      if (j == 3)
	{
	  return -1.0 / ((450.000000000000 - -50.0000000000000) /
			 ((double) g - 1.0)) * (-4.0 / 5.0 * (y[j - 1] -
							      y[j + 1]) +
						1.0 / 5.0 * (y[j - 2] -
							     y[j + 2]) -
						4.0 / 105.0 * (y[j - 3] -
							       y[j + 3]) +
						1.0 / 280.0 * (0.0 -
							       y[j + 4]));
	}
    }

  if (j == g - 4)
    {
      return -1.0 / ((450.000000000000 - -50.0000000000000) /
		     ((double) g - 1.0)) * (-4.0 / 5.0 * (y[j - 1] -
							  y[j + 1]) +
					    1.0 / 5.0 * (y[j - 2] -
							 y[j + 2]) -
					    4.0 / 105.0 * (y[j - 3] -
							   y[j + 3]) +
					    1.0 / 280.0 * (y[j - 4] - 0.0));
    }
  if (j == g - 3)
    {
      return -1.0 / ((450.000000000000 - -50.0000000000000) /
		     ((double) g - 1.0)) * (-4.0 / 5.0 * (y[j - 1] -
							  y[j + 1]) +
					    1.0 / 5.0 * (y[j - 2] -
							 y[j + 2]) -
					    4.0 / 105.0 * (y[j - 3] - 0.0) +
					    1.0 / 280.0 * (y[j - 4] - 0.0));
    }
  if (j == g - 2)
    {
      return -1.0 / ((450.000000000000 - -50.0000000000000) /
		     ((double) g - 1.0)) * (-4.0 / 5.0 * (y[j - 1] -
							  y[j + 1]) +
					    1.0 / 5.0 * (y[j - 2] - 0.0) -
					    4.0 / 105.0 * (y[j - 3] - 0.0) +
					    1.0 / 280.0 * (y[j - 4] - 0.0));
    }
  if (j == g - 1)
    {
      return -1.0 / ((450.000000000000 - -50.0000000000000) /
		     ((double) g - 1.0)) * (-4.0 / 5.0 * (y[j - 1] - 0.0) +
					    1.0 / 5.0 * (y[j - 2] - 0.0) -
					    4.0 / 105.0 * (y[j - 3] - 0.0) +
					    1.0 / 280.0 * (y[j - 4] - 0.0));
    }
  return -1;
}

static inline void
initial_values (const double t, double *y)
{
  for (int i = 0; i < n; ++i)
    {
      double x =
	-50.0000000000000 +
	((double) i *
	 ((450.000000000000 - -50.0000000000000) / ((double) g - 1.0)));
      y[i] =
	0.500000000000000 * exp (-(x * x) /
				 (3.00000000000000 * 3.00000000000000));
    }
}
